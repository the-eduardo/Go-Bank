// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// Use AddAccountBalance to add the amount of money as a new entry.
	AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error)
	// noinspection SqlResolveForFile
	CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error)
	// noinspection SqlResolveForFile
	CreateNewTransfer(ctx context.Context, arg CreateNewTransferParams) (Transfer, error)
	// noinspection SqlResolveForFile
	CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error)
	// noinspection SqlResolveForFile
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	DeleteAccount(ctx context.Context, id int64) error
	GetAccount(ctx context.Context, id int64) (Account, error)
	GetAccountForUpdate(ctx context.Context, id int64) (Account, error)
	// GetEntry returns the entry with an entry ID
	GetEntry(ctx context.Context, id int64) (Entry, error)
	GetSession(ctx context.Context, id pgtype.UUID) (Session, error)
	// GetTransferById returns a single transfer by ID
	GetTransferById(ctx context.Context, id int64) (Transfer, error)
	GetUser(ctx context.Context, username string) (User, error)
	ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error)
	// ListEntries returns a list of entries for the given account ID
	ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error)
	// ListTransfersByAccountId returns a list of transfers for a given account ID
	ListTransfersByAccountId(ctx context.Context, arg ListTransfersByAccountIdParams) ([]Transfer, error)
	// noinspection SqlResolveForFile
	// NewEntry Does not add the amount of money. Use AddAccountBalance instead
	NewEntry(ctx context.Context, arg NewEntryParams) (Entry, error)
	UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error)
}

var _ Querier = (*Queries)(nil)
