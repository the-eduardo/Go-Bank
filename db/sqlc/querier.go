// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"context"
)

type Querier interface {
	// Use AddAccountBalance to add the amount of money as a new entry.
	AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error)
	CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error)
	CreateNewTransfer(ctx context.Context, arg CreateNewTransferParams) (Transfer, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	DeleteAccount(ctx context.Context, id int64) error
	GetAccount(ctx context.Context, id int64) (Account, error)
	GetAccountForUpdate(ctx context.Context, id int64) (Account, error)
	// GetEntry returns the entry with an entry ID
	GetEntry(ctx context.Context, id int64) (Entry, error)
	// GetTransferById returns a single transfer by ID
	GetTransferById(ctx context.Context, id int64) (Transfer, error)
	GetUser(ctx context.Context, username string) (User, error)
	ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error)
	// ListEntries returns a list of entries for the given account ID
	ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error)
	// ListTransfersByAccountId returns a list of transfers for a given account ID
	ListTransfersByAccountId(ctx context.Context, arg ListTransfersByAccountIdParams) ([]Transfer, error)
	// NewEntry Does not add the amount of money. Use AddAccountBalance instead
	NewEntry(ctx context.Context, arg NewEntryParams) (Entry, error)
	UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error)
}

var _ Querier = (*Queries)(nil)
